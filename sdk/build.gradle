import java.text.SimpleDateFormat

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"


    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 1
        versionName project.getProperty("libraryVersion")

        consumerProguardFiles 'consumer-rules.pro'
        group = 'com.qonversion.android.sdk'
        version = '2.7.0'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    testOptions {
        unitTests.all {
            // All the usual Gradle options.
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }
        }
    }
}

bintray {
    user = getProps("bintray_user")
    key = getProps("bintray_password")

    pkg {
        repo = 'Qonversion'
        name = 'com.qonversion.android.sdk'

        version {
            name = '2.7.0'
            desc = 'qonversion-android-sdk'
            released  = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZZ", Locale.ENGLISH).format(new Date())
            vcsTag = '2.7.0'
        }

        licenses = ['MIT']
        vcsUrl = 'https://github.com/qonversion/android-sdk.git'
        websiteUrl = 'https://qonversion.io/'
    }
    configurations = ['archives']
    publishing {
        publications {
            MyPublication(MavenPublication) {
                groupId 'com.qonversion.android.sdk'
                artifactId 'sdk'
                version '2.7.0'
            }
        }
    }
}

def getProps(String propName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return ""
    }
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "skipped", "passed", "failed"
        showStandardStreams true
    }
}

ext {


    PUBLISH_GROUP_ID = 'com.qonversion.android.sdk'
    PUBLISH_ARTIFACT_ID = 'sdk'
    PUBLISH_VERSION = '2.7.0'

    kotlinVersion = '1.3.61'
    moshiVersion = '1.9.2'
    retrofit_version = '2.3.0'
    okhttp_version = '3.12.8'
    interceptor_version = '4.2.2'
    billing = '3.0.0'
    lifecycle_version = '2.1.0'
    assertj_version = '3.16.1'
    junit_version = '5.6.2'
    dagger_version = '2.24'

    kotlinStdLib = "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

    billing = [
            billingClient: "com.android.billingclient:billing:$billing"
    ]

    moshi = [
            core          : "com.squareup.moshi:moshi:$moshiVersion",
            koltin_codegen: "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion",
            adapters      : "com.squareup.moshi:moshi-adapters:$moshiVersion"
    ]

    network = [
            core              : "com.squareup.retrofit2:retrofit:$retrofit_version",
            moshiConverter    : "com.squareup.retrofit2:converter-moshi:$retrofit_version",
            okhttp            : "com.squareup.okhttp3:okhttp:$okhttp_version",
            interceptor       : "com.squareup.okhttp3:logging-interceptor:$interceptor_version"
    ]

    lifecycle = [
            runtime   : "androidx.lifecycle:lifecycle-runtime:$lifecycle_version",
            extensions: "androidx.lifecycle:lifecycle-extensions:$lifecycle_version",
            compiler  : "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    ]

    assertj = [
            core: "org.assertj:assertj-core:$assertj_version"
    ]

    junit = [
          api   : "org.junit.jupiter:junit-jupiter-api:$junit_version",
          engine: "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    ]

    dagger = [
            core   : "com.google.dagger:dagger:$dagger_version",
            compiler: "com.google.dagger:dagger-compiler:$dagger_version"
    ]
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Moshi
    implementation moshi.core
    implementation moshi.adapters
    kapt moshi.koltin_codegen

    // UI
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    // Billing
    implementation billing.billingClient

    // Network
    implementation network.core
    implementation network.okhttp
    implementation network.moshiConverter
    implementation network.interceptor


    // Lifecycle components
    implementation lifecycle.runtime
    implementation lifecycle.extensions
    kapt lifecycle.compiler

    // Dagger
    implementation dagger.core
    kapt dagger.compiler

    // Preference
    implementation "androidx.preference:preference:1.1.1"

    // Kotlin Reflect
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:26.1.0')
    implementation 'com.google.firebase:firebase-messaging-ktx'

    // JUnit
    testImplementation 'junit:junit:4.13'
    testImplementation junit.api
    testRuntimeOnly junit.engine

    // AssertJ
    testImplementation assertj.core

    // Robolectric
    testImplementation "org.robolectric:robolectric:4.3.1"

    // MockK
    testImplementation 'io.mockk:mockk:1.10.0'

    // Mockito
    testImplementation 'org.mockito:mockito-core:2.23.0'

    testImplementation 'androidx.test:core:1.2.0'

    testImplementation 'androidx.test.ext:junit:1.1.1'

    testImplementation "org.json:json:20140107"

    testImplementation 'com.github.IvanShafran:shared-preferences-mock:1.0'

}

apply from: 'https://raw.githubusercontent.com/blundell/release-android-library/master/android-release-aar.gradle'
